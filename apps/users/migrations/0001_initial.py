# Generated by Django 4.2.10 on 2025-03-29 11:34

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Permission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("codename", models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "permissions",
                    models.ManyToManyField(related_name="roles", to="users.permission"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("username", models.CharField(max_length=150, unique=True)),
                (
                    "user_id",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                (
                    "telegram_user_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("first_name", models.CharField(blank=True, max_length=255, null=True)),
                ("last_name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("image_url", models.CharField(blank=True, max_length=255, null=True)),
                ("is_admin", models.BooleanField(default=False)),
                ("is_blocked", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_subscribed", models.BooleanField(default=False)),
                (
                    "balance",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("password", models.CharField(max_length=128)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "roles",
                    models.ManyToManyField(
                        blank=True, related_name="users", to="users.role"
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Foydalanuvchi",
                "verbose_name_plural": "Foydalanuvchilar",
                "permissions": [
                    ("can_view_users", "Can view users"),
                    ("can_edit_users", "Can edit users"),
                    ("can_block_users", "Can block users"),
                    ("can_view_signals", "Can view signals"),
                    ("can_create_signals", "Can create signals"),
                    ("can_edit_signals", "Can edit signals"),
                    ("can_delete_signals", "Can delete signals"),
                    ("can_view_payments", "Can view payments"),
                    ("can_approve_payments", "Can approve payments"),
                    ("can_reject_payments", "Can reject payments"),
                    ("can_view_subscriptions", "Can view subscriptions"),
                    ("can_manage_subscriptions", "Can manage subscriptions"),
                    ("can_view_reviews", "Can view reviews"),
                    ("can_manage_reviews", "Can manage reviews"),
                    ("can_send_broadcasts", "Can send broadcast messages"),
                ],
            },
        ),
    ]
